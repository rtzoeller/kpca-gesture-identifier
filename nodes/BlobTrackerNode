#!/usr/bin/env python
from __future__ import division, print_function

import numpy as np
import cv2
import freenect
import time
import rospy
from geometry_msgs.msg import PointStamped

from kpca_gesture_identifier.Point import Point
from kpca_gesture_identifier.msg import TrajectoryStamped

publisher = rospy.Publisher("trajectory", TrajectoryStamped, queue_size=5)


def kinectReadFrame():
    array, _ = freenect.sync_get_video()
    array = cv2.cvtColor(array, cv2.COLOR_RGB2BGR)
    return array


def publish(trajectory):
    if trajectory is None or len(trajectory) < 10:
        return False

    print(trajectory)
    baseTime = rospy.Time.now() - rospy.Duration(trajectory[-1].t)
    outputTrajectory = TrajectoryStamped()
    for p in trajectory:
        pointStamped = PointStamped()
        pointStamped.header.stamp = baseTime + rospy.Duration(p.t)
        pointStamped.point.x = p.x
        pointStamped.point.y = p.y
        outputTrajectory.points.append(pointStamped)

    publisher.publish(outputTrajectory)

    return True


if __name__ == '__main__':
    rospy.init_node("BlobTracker", anonymous=True)
    missed_straight = 0
    missed_straight_cap = 2
    trajectory = None
    while True:
        frame = kinectReadFrame()
        hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

        # We include all pixels which match a bright purple, as well as some that
        # match a darker purple with a higher minimum saturation bound.
        threshold = cv2.inRange(hsv, np.array([140, 100, 50]), np.array([175, 255, 255]))
        threshold |= cv2.inRange(hsv, np.array([140, 150, 10]), np.array([185, 255, 80]))

        threshold = cv2.erode(threshold, None, iterations=2)
        threshold = cv2.dilate(threshold, None, iterations=2)
        contours = cv2.findContours(threshold.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)[-2]

        if len(contours) > 0:
            c = max(contours, key=cv2.contourArea)
            ((x, y), radius) = cv2.minEnclosingCircle(c)

            if radius > 25:
                missed_straight = 0
                cv2.circle(frame, (int(x), int(y)), int(radius), (0, 255, 255), 2)

                if trajectory is None:
                    trajectory = []
                trajectory.append(Point(x, y, time.time()))
            else:
                missed_straight += 1
                if missed_straight > missed_straight_cap:
                    publish(trajectory)
                    trajectory = None
        else:
            missed_straight += 1
            if missed_straight > missed_straight_cap:
                publish(trajectory)
                trajectory = None

        cv2.imshow("Blobs", threshold)
        cv2.imshow("Camera", frame)
        key = cv2.waitKey(1) & 0xFF

        # if the 'q' key is pressed, stop the loop
        if key == ord("q"):
            break

    cv2.destroyAllWindows()
